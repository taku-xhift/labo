#define CRY_TMP_FLAGS BOOST_PP_APPLY(BOOST_PP_ITERATION_FLAGS())

#define CRY_TMP_FUN_MODE BOOST_PP_TUPLE_ELEM(2,0,CRY_TMP_FLAGS)
#define CRY_TMP_VOID_MODE BOOST_PP_TUPLE_ELEM(2,1,CRY_TMP_FLAGS)

#define CRY_TMP_IS_PTR_FUN BOOST_PP_EQUAL(CRY_TMP_FUN_MODE, 0)
#define CRY_TMP_IS_REF_FUN BOOST_PP_EQUAL(CRY_TMP_FUN_MODE, 1)
#define CRY_TMP_IS_MEM_FUN BOOST_PP_EQUAL(CRY_TMP_FUN_MODE, 2)
#define CRY_TMP_IS_CONST_MEM_FUN BOOST_PP_EQUAL(CRY_TMP_FUN_MODE, 3)

#define CRY_TMP_IS_NON_VOID BOOST_PP_EQUAL(CRY_TMP_VOID_MODE, 0)



#if CRY_TMP_IS_NON_VOID
#define CRY_TMP_CLASS_R_COMMA class R,
#else
#define CRY_TMP_CLASS_R_COMMA
#endif

#if BOOST_PP_OR(CRY_TMP_IS_MEM_FUN, CRY_TMP_IS_CONST_MEM_FUN)
#define CRY_TMP_CLASS_X_COMMA class X,
#else
#define CRY_TMP_CLASS_X_COMMA
#endif

#define CRY_TMP_N BOOST_PP_ITERATION()

#define CRY_TMP_PARAM_DECLS_COMMA \
BOOST_PP_ENUM_BINARY_PARAMS(CRY_TMP_N,class BOOST_PP_INTERCEPT,A) \
BOOST_PP_COMMA_IF(CRY_TMP_N)

#if CRY_TMP_IS_NON_VOID
#define CRY_TMP_RESULT_TYPE R
#else
#define CRY_TMP_RESULT_TYPE void
#endif

#if CRY_TMP_IS_PTR_FUN
#define CRY_TMP_TYPE_SPEC *
#elif CRY_TMP_IS_REF_FUN
#define CRY_TMP_TYPE_SPEC &
#else
#define CRY_TMP_TYPE_SPEC X::*
#endif

#if CRY_TMP_IS_CONST_MEM_FUN
#define CRY_TMP_CONST const
#else
#define CRY_TMP_CONST
#endif

#define CRY_TMP_F_DECL \
CRY_TMP_RESULT_TYPE \
(CRY_TMP_TYPE_SPEC f) \
(BOOST_PP_ENUM_PARAMS(CRY_TMP_N,A)) \
CRY_TMP_CONST

#define CRY_TMP_FUN_TYPE \
CRY_TMP_RESULT_TYPE \
(CRY_TMP_TYPE_SPEC) \
(BOOST_PP_ENUM_PARAMS(CRY_TMP_N,A)) \
CRY_TMP_CONST

#define CRY_TMP_FWD_PARAM_DECLS \
BOOST_PP_ENUM_BINARY_PARAMS(CRY_TMP_N,A,a)

#define CRY_TMP_TRAILING_FWD_PARAM_DECLS \
BOOST_PP_COMMA_IF(CRY_TMP_N) CRY_TMP_FWD_PARAM_DECLS

#if CRY_TMP_IS_NON_VOID
#define CRY_TMP_RETURN return
#else
#define CRY_TMP_RETURN
#endif

#define CRY_TMP_FWD_ARGS \
BOOST_PP_ENUM_PARAMS(CRY_TMP_N,a)



template
<
  CRY_TMP_CLASS_R_COMMA
  CRY_TMP_CLASS_X_COMMA
  CRY_TMP_PARAM_DECLS_COMMA
  CRY_TMP_F_DECL
>
struct il_ptr_fun
<
  CRY_TMP_FUN_TYPE,
  f
>
{
  template<class Args>
  struct sig
  { typedef CRY_TMP_RESULT_TYPE type; };

#if BOOST_PP_OR(CRY_TMP_IS_PTR_FUN, CRY_TMP_IS_REF_FUN)
  CRY_TMP_RESULT_TYPE
  operator()(CRY_TMP_FWD_PARAM_DECLS) const
  { CRY_TMP_RETURN f(CRY_TMP_FWD_ARGS); }
#endif

#if CRY_TMP_IS_MEM_FUN
  CRY_TMP_RESULT_TYPE
  operator()(X *p CRY_TMP_TRAILING_FWD_PARAM_DECLS) const
  { CRY_TMP_RETURN (p->*f)(CRY_TMP_FWD_ARGS); }

  CRY_TMP_RESULT_TYPE
  operator()(X &x CRY_TMP_TRAILING_FWD_PARAM_DECLS) const
  { CRY_TMP_RETURN (p.*f)(CRY_TMP_FWD_ARGS); }
#endif

#if CRY_TMP_IS_CONST_MEM_FUN
  CRY_TMP_RESULT_TYPE
  operator()(X const *p CRY_TMP_TRAILING_FWD_PARAM_DECLS) const
  { CRY_TMP_RETURN (p->*f)(CRY_TMP_FWD_ARGS); }

  CRY_TMP_RESULT_TYPE
  operator()(X const &x CRY_TMP_TRAILING_FWD_PARAM_DECLS) const
  { CRY_TMP_RETURN (p.*f)(CRY_TMP_FWD_ARGS); }
#endif
};



#undef CRY_TMP_FLAGS
#undef CRY_TMP_FUN_MODE
#undef CRY_TMP_VOID_MODE
#undef CRY_TMP_IS_PTR_FUN
#undef CRY_TMP_IS_REF_FUN
#undef CRY_TMP_IS_MEM_FUN
#undef CRY_TMP_IS_CONST_MEM_FUN
#undef CRY_TMP_IS_NON_VOID
#undef CRY_TMP_CLASS_R_COMMA
#undef CRY_TMP_CLASS_X_COMMA
#undef CRY_TMP_N
#undef CRY_TMP_PARAM_DECLS_COMMA
#undef CRY_TMP_RESULT_TYPE
#undef CRY_TMP_TYPE_SPEC
#undef CRY_TMP_CONST
#undef CRY_TMP_F_DECL
#undef CRY_TMP_FUN_TYPE
#undef CRY_TMP_FWD_PARAM_DECLS
#undef CRY_TMP_FWD_TRAILING_PARAM_DECLS
#undef CRY_TMP_RETURN
#undef CRY_TMP_FWD_ARGS
