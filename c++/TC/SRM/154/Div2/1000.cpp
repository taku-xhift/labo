


#include <array>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
#include <numeric>
#include <iomanip>


using namespace std;


struct People {
	People(const string& name)
		: name_(name)
		, sum_(0)
	{
	}


	string GetFormated() const {
		char temp[0xff] = {0};
		sprintf(temp, "%8.1f", accumulate(this->score_.begin(), this->score_.end(), .0));
		stringstream ss;
		ss << this->name_ << " " << this->sum_ << " " << temp;
		return ss.str();
	}

	string name_;
	int sum_;
	vector<double> score_;
};


vector<People> list;


struct Comp {

	Comp() : compNum_(0) {}

	bool operator()(const People& lhs, const People& rhs) const {
		return lhs.score_[this->compNum_] > rhs.score_[this->compNum_];
	}

	int compNum_;
};


struct CompBySum {
	bool operator()(const People& lhs, const People& rhs) {
		return lhs.sum_ < rhs.sum_;
	}
};


class ContestScore {
public:
	static vector <string> sortResults(vector <string> data) {
		if (data.empty()) {
			return vector<string>();
		}

		stringstream ss;
		string name;
		double score = .0;

		for (int i = 0; i < data.size(); ++i) {
			ss << data[i];
			ss >> name;

			People people(name);
			while (ss) {
				ss >> score;
				people.score_.push_back(score);
			}
			vector<double>::iterator ite = people.score_.end();
			--ite;
			people.score_.erase(ite);

			list.push_back(people);

			ss.str("");
			ss.clear();
		}

		Comp comp;
		for (int i = 0; i < list.front().score_.size(); ++i) {
			comp.compNum_ = i;
			sort(list.begin(), list.end(), comp);

			for (int j = 0; j < list.size(); ++j) {
				list[j].sum_ += j +1;
			}
		}

		sort(list.begin(), list.end(), CompBySum());

		vector<string> ret;
		for (int i = 0; i < list.size(); ++i) {
			ret.push_back(list[i].GetFormated());
		}

		return ret;
	}

	static void test() {
		{
			array<string, 3> arg = {
				"A 90.7 92.9 87.4",
				"B 90.5 96.6 88.0",
				"C 92.2 91.0 95.3"};
			auto ret = sortResults(vector<string>(arg.begin(), arg.end()));
			for (auto& para : ret) {
				cerr << para << ", ";
			}
			cerr << "\n";
		}
		{
			array<string, 9> arg = {
				"STANFORD 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3",
				"MIT 95.5 83.9 80.4 85.5 98.7 98.3 96.7 82.7",
				"PRINCETON 99.2 79.1 87.6 85.1 93.6 96.4 86.0 90.6",
				"HARVARD 83.6 92.0 85.5 94.3 97.5 91.5 92.5 83.0",
				"YALE 99.5 92.6 86.2 82.0 96.4 92.6 84.5 78.6",
				"COLUMBIA 97.2 87.6 81.7 93.7 88.0 86.3 95.9 89.6",
				"BROWN 92.2 95.8 92.1 81.5 89.5 87.0 95.5 86.4",
				"PENN 96.3 80.7 81.2 91.6 85.8 92.2 83.9 87.8",
				"CORNELL 88.0 83.7 85.0 83.8 99.8 92.1 91.0 88.9"};
			auto ret = sortResults(vector<string>(arg.begin(), arg.end()));
			for (auto& para : ret) {
				cerr << para << ", ";
			}
			cerr << "\n";
		}
		{
			array<string, 0> arg = {};
			auto ret = sortResults(vector<string>(arg.begin(), arg.end()));
			for (auto& para : ret) {
				cerr << para << ", ";
			}
			cerr << "\n";
		}
		{
			array<string, 6> arg = {
				"AA 90.0 80.0 70.0 60.0 50.0 40.0",
				"BBB 80.0 70.0 60.0 50.0 40.0 90.0",
				"EEE 70.0 60.0 50.0 40.0 90.0 80.0",
				"AAA 60.0 50.0 40.0 90.0 80.0 70.0",
				"DDD 50.0 40.0 90.0 80.0 70.0 60.0",
				"CCC 40.0 90.0 80.0 70.0 60.0 50.0"};
			auto ret = sortResults(vector<string>(arg.begin(), arg.end()));
			for (auto& para : ret) {
				cerr << para << ", ";
			}
			cerr << "\n";
		}
		{
			array<string, 4> arg = {
				"A 00.1",
				"B 05.2",
				"C 29.0",
				"D 00.0"};
			auto ret = sortResults(vector<string>(arg.begin(), arg.end()));
			for (auto& para : ret) {
				cerr << para << ", ";
			}
			cerr << "\n";
		}

		{
			array<string, 50> arg = {
				"A  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"B  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"C  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"D  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"E  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"F  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"G  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"H  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"I  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"J  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"K  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"L  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"M  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"N  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"O  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"P  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"Q  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"R  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"S  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"T  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"U  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"V  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"W  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"X  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"Y  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"Z  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"a  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"b  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"c  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"d  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"e  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"f  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"g  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"h  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"i  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"j  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"k  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"l  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"m  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"n  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"o  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"p  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"q  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"r  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"s  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"t  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"u  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
				"v  85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 85.3 90.1 82.6 84.6 96.6 94.5 87.3 90.3 12.3 32.4",
			};
			auto ret = sortResults(vector<string>(arg.begin(), arg.end()));
			for (auto& para : ret) {
				cerr << para << ", ";
			}
			cerr << "\n";
		}
	}
};






int main() {
	ContestScore::test();
}

